#+STARTUP: latexpreview

* House keeping :noexport:
#+begin_src elisp :results none :tangle no :exports none
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (setq org-confirm-babel-evaluate nil)
#+end_src

* Statistical distributions

From https://www.quantstart.com/articles/Statistical-Distributions-in-C/

** Interface
#+begin_src C
  #ifndef __STATISTICS_H
  #define __STATISTICS_H

  #include <cmath>
  #include <vector>

  class StatisticalDistribution {
   public:
    StatisticalDistribution();
    virtual ~StatisticalDistribution();

    // Distribution functions
    virtual double pdf(const double& x) const = 0;
    virtual double cdf(const double& x) const = 0;

    // Inverse cumulative distribution functions (aka the quantile function)
    virtual double inv_cdf(const double& quantile) const = 0;
  
    // Descriptive stats
    virtual double mean() const = 0;
    virtual double var() const = 0;
    virtual double stdev() const = 0;

    // Obtain a sequence of random draws from this distribution
    virtual void random_draws(const std::vector<double>& uniform_draws,
                              std::vector<double>& dist_draws) = 0;
  };

  #endif
#+end_src

** Standard Normal Distribution
$$
\phi(x) = \frac{1}{\sqrt{2\pi}} e^{-\frac12 x^2}
$$

$$
\Phi(x) = \frac{1}{\sqrt{2\pi}} \int
e^{-\frac12 t^2} dt
$$



*** Header files
#+begin_src C
  class StandardNormalDistribution : public StatisticalDistribution {
   public:
    StandardNormalDistribution();
    virtual ~StandardNormalDistribution();

    // Distribution functions
    virtual double pdf(const double& x) const;
    virtual double cdf(const double& x) const;

    // Inverse cumulative distribution function (aka the probit function)
    virtual double inv_cdf(const double& quantile) const;

    // Descriptive stats
    virtual double mean() const;   // equal to 0
    virtual double var() const;    // equal to 1 
    virtual double stdev() const;  // equal to 1

    // Obtain a sequence of random draws from the standard normal distribution
    virtual void random_draws(const std::vector<double>& uniform_draws,
                              std::vector<double>& dist_draws);
  };
#+end_src
*** Source code
#+begin_src C
  #ifndef __STATISTICS_CPP
  #define __STATISTICS_CPP

  #define _USE_MATH_DEFINES

  #include "statistics.h"
  #include <iostream>

  StatisticalDistribution::StatisticalDistribution() {}
  StatisticalDistribution::~StatisticalDistribution() {}

  // Constructor/destructor
  StandardNormalDistribution::StandardNormalDistribution() {}
  StandardNormalDistribution::~StandardNormalDistribution() {}

  // Probability density function
  double StandardNormalDistribution::pdf(const double& x) const {
    return (1.0/sqrt(2.0 * M_PI)) * exp(-0.5*x*x);
  }

  // Cumulative density function
  double StandardNormalDistribution::cdf(const double& x) const {
    double k = 1.0/(1.0 + 0.2316419*x);
    double k_sum = k*(0.319381530 + k*(-0.356563782 + k*(1.781477937 + k*(-1.821255978 + 1.330274429*k))));

    if (x >= 0.0) {
      return (1.0 - (1.0/(pow(2*M_PI,0.5)))*exp(-0.5*x*x) * k_sum);
    } else {
      return 1.0 - cdf(-x);
    }
  }

  // Inverse cumulative distribution function (aka the probit function)
  double StandardNormalDistribution::inv_cdf(const double& quantile) const {
    // This is the Beasley-Springer-Moro algorithm which can 
    // be found in Glasserman [2004]. We won't go into the
    // details here, so have a look at the reference for more info
    static double a[4] = {   2.50662823884,
                           -18.61500062529,
                            41.39119773534,
                           -25.44106049637};

    static double b[4] = {  -8.47351093090,
                            23.08336743743,
                           -21.06224101826,
                             3.13082909833};

    static double c[9] = {0.3374754822726147,
                          0.9761690190917186,
                          0.1607979714918209,
                          0.0276438810333863,
                          0.0038405729373609,
                          0.0003951896511919,
                          0.0000321767881768,
                          0.0000002888167364,
                          0.0000003960315187};

    if (quantile >= 0.5 && quantile <= 0.92) {
      double num = 0.0;
      double denom = 1.0;

      for (int i=0; i<4; i++) {
        num += a[i] * pow((quantile - 0.5), 2*i + 1);
        denom += b[i] * pow((quantile - 0.5), 2*i);
      }
      return num/denom;

    } else if (quantile > 0.92 && quantile < 1) {
      double num = 0.0;

      for (int i=0; i<9; i++) {
        num += c[i] * pow((log(-log(1-quantile))), i);
      }
      return num;

    } else {
      return -1.0*inv_cdf(1-quantile);
    }
  }

  // Expectation/mean
  double StandardNormalDistribution::mean() const { return 0.0; }

  // Variance 
  double StandardNormalDistribution::var() const { return 1.0; }

  // Standard Deviation
  double StandardNormalDistribution::stdev() const { return 1.0; }

  // Obtain a sequence of random draws from this distribution
  void StandardNormalDistribution::random_draws(const std::vector& uniform_draws,
                                                std::vector& dist_draws) {
    // The simplest method to calculate this is with the Box-Muller method, 
    // which has been used procedurally in many other articles on QuantStart.com

    // Check that the uniform draws and dist_draws are the same size and
    // have an even number of elements (necessary for B-M)
    if (uniform_draws.size() != dist_draws.size()) {
      std::cout << "Draws vectors are of unequal size in standard normal dist." << std::endl;
      return;
    }

    // Check that uniform draws have an even number of elements (necessary for B-M)
    if (uniform_draws.size() % 2 != 0) {
      std::cout << "Uniform draw vector size not an even number." << std::endl;
      return;
    }

    // Slow, but easy to implement
    for (int i=0; i<uniform_draws.size() / 2; i++) {
      dist_draws[2*i] = sqrt(-2.0*log(uniform_draws[2*i])) * sin(2*M_PI*uniform_draws[2*i+1]);
      dist_draws[2*i+1] = sqrt(-2.0*log(uniform_draws[2*i])) * cos(2*M_PI*uniform_draws[2*i+1]);
    }

    return;
  }
  #endif
#+end_src

*** Main example

#+begin_src C
  #include "statistics.h"
  #include <iostream>
  #include <vector>

  int main(int argc, char **argv) {

    // Create the Standard Normal Distribution and random draw vectors
    StandardNormalDistribution snd;
    std::vector<double> uniform_draws(20, 0.0);
    std::vector<double> normal_draws(20, 0.0);

    // Simple random number generation method based on RAND
    for (int i=0; i<uniform_draws.size(); i++) {
      uniform_draws[i] = rand() / static_cast<double>(RAND_MAX);
    }

    // Create standard normal random draws
    // Notice that the uniform draws are unaffected. We have separated
    // out the uniform creation from the normal draw creation, which
    // will allow us to create sophisticated random number generators
    // without interfering with the statistical classes
    snd.random_draws(uniform_draws, normal_draws);

    // Output the values of the standard normal random draws
    for (int i=0; i<normal_draws.size(); i++) {
      std::cout << normal_draws[i] << std::endl;
    }

    return 0;
  }
#+end_src
* Vanilla Black-Scholes Formulas

$$
x = 5 * \alpha 
$$ 

#+HEADERS: :includes <math.h> :flags -lm 
#+HEADERS: :var x=2.0 :var y=4.0 :var z=10.0
#+BEGIN_SRC C 
  double BSVanillaCall(double spot,
                       double strike,
                       double r,
                       double volatility,
                       double expiry,
                       double dividend = 0.){

    double standardDeviation = volatility * sqrt(expiry);
    double moneyness = log(spot/strike);
    double d1 = (moneyness + (r-dividend)*expiry + 0.5*standardDeviation
      ,*standardDeviation)/standardDeviation;
    double d2 = d1 - standardDeviation;
    double value = spot*exp(-dividend*expiry)*CumulativeNormal(d1) -
      strike*exp(-r*expiry)*CumulativeNormal(d1)
    return value
#+END_SRC


* Example
#+HEADERS: :includes <math.h> :flags -lm 
#+HEADERS: :var x=2.0 :var y=5.0 :var z=10.0
#+BEGIN_SRC C 
  double pi = 4*atan(1);
  double r, theta, phi;
  r = sqrt(x*x+y*y+z*z);
  theta = acos(z/r);
  phi = atan2(y,x);
  printf("%f %f %f", r, theta, phi);
#+END_SRC

#+RESULTS:
: 11.357817 0.493984 1.190290
